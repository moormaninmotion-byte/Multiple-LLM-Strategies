import React, { useState, useCallback } from 'react';
import type { ChainStep, Priority } from '../../types';
import { streamGeminiResponse } from '../../services/geminiService';
import Spinner from '../Spinner';
import CheckIcon from '../icons/CheckIcon';
import Feedback from '../Feedback';

const FAILED_ATTEMPT_CODE = `def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True`;

const EVALUATION_FEEDBACK = `The code is functionally correct for checking primality, but it is missing the required docstring that explains what the function does, its parameters, and what it returns.`;

const getPriorityStyles = (priority: Priority) => {
    switch (priority) {
      case 'high': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'low': return 'bg-sky-500/20 text-sky-400 border-sky-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
};

const ReflexionDemo: React.FC = () => {
    const [task, setTask] = useState<string>('Write a Python function to check if a number is prime. The function must include a docstring explaining its purpose, arguments, and return value.');
    const [steps, setSteps] = useState<ChainStep[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [runId, setRunId] = useState<string | null>(null);


    const runChain = useCallback(async () => {
        setIsLoading(true);
        setRunId(Date.now().toString());
        const initialSteps: ChainStep[] = [
            { title: 'Attempt 1: Act', prompt: task, output: '', isLoading: true, isComplete: false, priority: 'high' },
            { title: 'Step 2: Evaluate', prompt: '', output: '', isLoading: false, isComplete: false, priority: 'high' },
            { title: 'Step 3: Reflect', prompt: '', output: '', isLoading: false, isComplete: false, priority: 'medium' },
            { title: 'Attempt 2: Retry with Reflection', prompt: '', output: '', isLoading: false, isComplete: false, priority: 'high' },
        ];
        setSteps(initialSteps);

        // --- Step 1: Act (Simulated failure) ---
        await new Promise(res => setTimeout(res, 500));
        setSteps(prev => {
            const newSteps = [...prev];
            newSteps[0].output = FAILED_ATTEMPT_CODE;
            newSteps[0].isLoading = false;
            newSteps[0].isComplete = true; // Complete but failed
            newSteps[1].prompt = `You are an evaluator. Review the following code generated for the task and check if it meets all requirements.\n\nTask: "${task}"\n\nCode:\n\`\`\`python\n${FAILED_ATTEMPT_CODE}\n\`\`\`\n\nDoes this meet all requirements? Provide concise feedback.`;
            newSteps[1].isLoading = true;
            return newSteps;
        });
        
        // --- Step 2: Evaluate (Simulated feedback) ---
        await new Promise(res => setTimeout(res, 800));
        setSteps(prev => {
            const newSteps = [...prev];
            newSteps[1].output = EVALUATION_FEEDBACK;
            newSteps[1].isLoading = false;
            newSteps[1].isComplete = true;
            newSteps[2].prompt = `You are a coding agent. Your previous attempt to solve a task failed. Reflect on the feedback provided to understand your mistake and create a short plan to fix it.\n\nYour failed code:\n\`\`\`python\n${FAILED_ATTEMPT_CODE}\n\`\`\`\n\nEvaluation Feedback: "${EVALUATION_FEEDBACK}"\n\nSelf-Reflection:`;
            newSteps[2].isLoading = true;
            return newSteps;
        });

        // --- Step 3: Reflect (Generated by Gemini) ---
        const reflectionPrompt = `You are a coding agent. Your previous attempt to solve a task failed. Reflect on the feedback provided to understand your mistake and create a short plan to fix it.\n\nYour failed code:\n\`\`\`python\n${FAILED_ATTEMPT_CODE}\n\`\`\`\n\nEvaluation Feedback: "${EVALUATION_FEEDBACK}"\n\nBased on the feedback, what was the mistake and what is the single most important thing to do next time? Reflection:`;
        let reflection = '';
        for await (const chunk of streamGeminiResponse(reflectionPrompt)) {
            reflection += chunk;
            setSteps(prev => {
                const newSteps = [...prev];
                newSteps[2].output = reflection;
                return newSteps;
            });
        }
        setSteps(prev => {
            const newSteps = [...prev];
            newSteps[2].isLoading = false;
            newSteps[2].isComplete = true;
            newSteps[3].prompt = `You are a Python expert. Your previous attempt to solve a task was incorrect. Using your self-reflection, you must now try again and provide a fully correct solution.\n\nOriginal Task: "${task}"\n\nYour Self-Reflection: "${reflection}"\n\nNow, provide the complete, corrected Python code.`;
            newSteps[3].isLoading = true;
            return newSteps;
        });
        
        // --- Step 4: Retry (Generated by Gemini) ---
        const retryPrompt = `You are a Python expert. Your previous attempt to solve a task was incorrect. Using your self-reflection, you must now try again and provide a fully correct solution.\n\nOriginal Task: "${task}"\n\nYour Self-Reflection: "${reflection}"\n\nNow, provide the complete, corrected Python code including the function and the required docstring.`;
        let finalCode = '';
         for await (const chunk of streamGeminiResponse(retryPrompt)) {
            finalCode += chunk;
            setSteps(prev => {
                const newSteps = [...prev];
                newSteps[3].output = finalCode;
                return newSteps;
            });
        }
        setSteps(prev => {
            const newSteps = [...prev];
            newSteps[3].isLoading = false;
            newSteps[3].isComplete = true;
            return newSteps;
        });

        setIsLoading(false);
    }, [task]);
    
    const isChainComplete = steps.length > 0 && steps[steps.length - 1].isComplete;

    return (
        <div className="space-y-5">
            <div className="space-y-2">
                <label htmlFor="task-input" className="block text-sm font-medium text-gray-400">
                    Define a task for the agent:
                </label>
                <div className="flex gap-4">
                    <input
                        id="task-input"
                        type="text"
                        value={task}
                        onChange={(e) => setTask(e.target.value)}
                        className="flex-grow bg-gray-800 border border-gray-600 rounded-md px-4 py-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-sm"
                        placeholder="Enter a task..."
                        disabled={isLoading}
                    />
                    <button
                        onClick={runChain}
                        disabled={isLoading || !task}
                        className="px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 disabled:bg-blue-900/50 disabled:text-gray-400 disabled:cursor-not-allowed transition-all flex items-center justify-center gap-2 shadow-lg shadow-blue-500/20 hover:shadow-xl hover:shadow-blue-500/30 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 text-sm"
                    >
                        {isLoading ? <><Spinner /> Running...</> : 'Run Chain'}
                    </button>
                </div>
            </div>
            
            <div className="space-y-3">
                {steps.map((step, index) => (
                    <div key={index} className={`bg-gray-800/50 border rounded-lg transition-all duration-300 ease-in-out ${step.isComplete ? 'border-green-500/30' : 'border-gray-700'}`}>
                        <div className="p-3 flex items-center justify-between border-b border-gray-700/50">
                            <h4 className="font-semibold text-base flex items-center gap-3">
                                <div className={`w-7 h-7 rounded-full flex items-center justify-center text-xs transition-all duration-300 ${step.isComplete ? 'bg-green-500/20 text-green-400' : 'bg-gray-700 text-gray-400'} ${step.isLoading ? 'animate-pulse' : ''}`}>
                                    {step.isLoading ? <Spinner className="w-4 h-4" /> : step.isComplete ? <CheckIcon className="w-5 h-5" /> : <span className="font-mono font-bold">{index + 1}</span>}
                                </div>
                                {step.title}
                            </h4>
                            {step.priority && (
                                <span className={`px-2 py-0.5 text-xs font-medium rounded-full border capitalize ${getPriorityStyles(step.priority)}`}>
                                    {step.priority}
                                </span>
                            )}
                        </div>
                        
                        {(step.prompt || step.output) && (
                          <div className="p-3 space-y-3">
                            {step.prompt && (
                                <div>
                                    <p className="text-xs font-semibold text-gray-500 mb-1 uppercase tracking-wider">Input / Prompt</p>
                                    <p className="text-xs text-gray-400 font-mono bg-gray-900/50 p-2.5 rounded-md break-words">{step.prompt}</p>
                                </div>
                            )}
                            
                            {step.output && (
                                <div>
                                    <p className="text-xs font-semibold text-gray-500 mb-1 uppercase tracking-wider">Output</p>
                                    <div className="text-gray-300 whitespace-pre-wrap bg-gray-900/20 p-2.5 rounded-md min-h-[2.5em] text-sm">
                                        {step.output}
                                        {step.isLoading && <span className="inline-block w-0.5 h-4 bg-gray-300 animate-pulse ml-1 align-[-2px]" />}
                                    </div>
                                </div>
                            )}
                          </div>
                        )}
                    </div>
                ))}
            </div>
            
            {isChainComplete && runId && (
              <Feedback runId={`reflexion-${runId}`} />
            )}
        </div>
    );
};

export default ReflexionDemo;